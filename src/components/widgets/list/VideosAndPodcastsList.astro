---
import Image from '~/components/common/Image.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import { sortedYears, videosAndPodcastsByYear } from '~/data/videosAndPodcasts';
import { twMerge } from 'tailwind-merge';

interface Props {
  columns?: 1 | 2 | 3 | 4;
  classes?: {
    container?: string;
    item?: string;
    title?: string;
    subtitle?: string;
    description?: string;
  };
}

const { columns = 2, classes = {} } = Astro.props;
---

<script>
  let selectedItem: {
    platform: string;
    videoId: string;
    title: string;
    poster?: string;
    video?: { src: string; alt: string };
  } | null = null;

  const IFRAME_FOCUS_DELAY = 500;
  const PLAYER_CREATION_DELAY = 360;

  function createPlayer(
    platform: string,
    videoId: string,
    title: string,
    poster?: string,
    video?: { src: string; alt: string }
  ) {
    const container = document.createElement('div');
    container.className = `${platform}-player player-container relative w-full aspect-video`;

    function createIframe(src: string): HTMLIFrameElement {
      const iframe = document.createElement('iframe');
      iframe.width = '100%';
      iframe.height = '100%';
      iframe.src = src;
      iframe.title = title.replace(/[<>"'&]/g, (char) => {
        const entities: Record<string, string> = {
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;',
          '&': '&amp;',
        };
        return entities[char];
      });
      iframe.setAttribute('frameborder', '0');
      iframe.className = 'absolute inset-0';
      iframe.tabIndex = 0;
      return iframe;
    }

    if (platform === 'Youtube') {
      const iframe = createIframe(
        `https://www.youtube-nocookie.com/embed/${encodeURIComponent(videoId)}?autoplay=1&enablejsapi=1&rel=0&modestbranding=1`
      );
      iframe.allow =
        'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share';
      iframe.allowFullscreen = true;
      container.appendChild(iframe);
    } else if (platform === 'Vimeo') {
      // Extract video ID and hash using regex
      const idRegExp = /^(\d+)(?:\/([a-f0-9]+))?$/i;
      const match = videoId.match(idRegExp);

      if (match) {
        const [, id, hash] = match;
        const searchParams = new URLSearchParams();
        searchParams.append('autoplay', '1');
        searchParams.append('dnt', '1');
        if (hash) {
          searchParams.set('h', hash);
        }
        const iframe = createIframe(
          `https://player.vimeo.com/video/${encodeURIComponent(id)}?${searchParams.toString()}`
        );
        iframe.allow = 'autoplay; fullscreen; picture-in-picture';
        container.appendChild(iframe);
      }
    } else if (platform === 'Doccheck') {
      const link = document.createElement('a');
      link.href = `https://www.doccheck.com/en/detail/videos/${encodeURIComponent(videoId)}`;
      link.target = '_blank';
      link.rel = 'noopener noreferrer';
      link.className = 'block w-full h-full';

      const img = document.createElement('img');
      img.src = poster || '';
      img.alt = title;
      img.className = 'mx-auto rounded-md w-full';

      link.appendChild(img);
      container.appendChild(link);
    } else if (platform === 'Soundcloud') {
      const iframe = createIframe(
        `https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/${encodeURIComponent(videoId)}&color=%23ff5500&auto_play=1&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true`
      );
      iframe.allow = 'autoplay';
      iframe.allowFullscreen = true;
      container.appendChild(iframe);
    } else if (platform === 'Spotify') {
      const iframe = createIframe(
        `https://open.spotify.com/embed/episode/${encodeURIComponent(videoId)}?utm_source=generator&theme=0`
      );
      iframe.allow = 'autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture';
      iframe.style.borderRadius = '12px';
      container.appendChild(iframe);
    } else if (platform === 'Other') {
      const videoElement = document.createElement('video');
      const source = document.createElement('source');
      source.src = video?.src || '';
      source.type = 'video/mp4';

      videoElement.appendChild(source);
      videoElement.controls = true;
      videoElement.autoplay = true;
      videoElement.className = 'w-full h-full rounded-lg';
      container.appendChild(videoElement);
    }

    return container;
  }

  function closeModal() {
    const modal = document.getElementById('video-modal');
    const modalContent = document.getElementById('modal-content');
    const activePlayer = modalContent?.querySelector('iframe');

    if (modal) {
      modal.classList.remove('visible');
      setTimeout(() => {
        modal.style.display = 'none';
        selectedItem = null;
        if (modalContent) {
          modalContent.innerHTML = '';
        }
        // Clean up active player to stop video/audio
        if (activePlayer) {
          activePlayer.src = '';
        }
      }, 0);
    }
  }

  async function openModal(videoContainer: HTMLElement, modal: HTMLDivElement, modalContent: HTMLDivElement) {
    try {
      async function displayModal() {
        await new Promise((resolve) => setTimeout(resolve, PLAYER_CREATION_DELAY));

        // Add player
        const player = createPlayer(
          selectedItem!.platform,
          selectedItem!.videoId,
          selectedItem!.title,
          selectedItem!.poster,
          selectedItem!.video
        );
        // Replace the thumbnail with the player
        const playerContainer = modalContent.querySelector('.player-container') as HTMLElement;
        if (playerContainer) {
          playerContainer.replaceWith(player);
        } else {
          modalContent.appendChild(player);
        }

        // Focus the iframe for keyboard navigation
        await new Promise((resolve) => setTimeout(resolve, IFRAME_FOCUS_DELAY));
        const iframe = player.querySelector('iframe');
        if (iframe) {
          if (selectedItem!.platform === 'Youtube') {
            // For YouTube, try to focus the video element inside iframe
            const video = iframe.contentDocument?.querySelector('video');
            if (video) {
              video.focus({ preventScroll: true });
            } else {
              // Fallback to iframe focus if video element not found
              iframe.focus({ preventScroll: true });
            }
          } else {
            // For other platforms, focus the iframe directly
            iframe.focus({ preventScroll: true });
          }
        }
      }

      // Add close button
      const closeButton = document.createElement('button');
      closeButton.type = 'button';
      closeButton.setAttribute('aria-label', 'Close modal');
      closeButton.className =
        'absolute top-2 right-2 sm:top-3 sm:right-3 md:top-4 md:right-4 p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary';
      closeButton.onclick = closeModal;
      closeButton.innerHTML = `
          <svg
            class="w-5 h-5 text-gray-500 dark:text-gray-400"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        `;
      modalContent.appendChild(closeButton);

      // Fallback for non-supporting browsers
      if (!document.startViewTransition) {
        modal.style.display = 'block';
        modal.classList.add('visible');

        await displayModal();
        return;
      }

      const thumbnail = videoContainer.querySelector('.thumbnail-wrapper') as HTMLElement;
      if (!thumbnail) {
        console.error('Thumbnail element not found');
        modal.style.display = 'block';
        return;
      }

      // Set initial view transition name
      thumbnail.style.viewTransitionName = 'modal';

      const transition = document.startViewTransition(async () => {
        // Remove view transition name from thumbnail
        thumbnail.style.viewTransitionName = '';
        // Set view transition name on modal content
        modalContent.style.viewTransitionName = 'modal';
        // Show modal with thumbnail first
        modal.style.display = 'block';
        modal.classList.add('visible');
      });

      // After transition, add the video player
      transition.finished
        .then(async () => {
          modalContent.style.viewTransitionName = '';
          await displayModal();
        })
        .catch((error) => {
          console.error('Error during modal transition:', error);
          modal.style.display = 'block';
        });
    } catch (error) {
      console.error('Error opening modal:', error);
      modal.style.display = 'block';
    }
  }

  // Close modal on Escape key
  const handleKeydown = (e: KeyboardEvent) => {
    if (e.key === 'Escape') {
      closeModal();
    }
  };

  const handleClick = async (e: MouseEvent) => {
    const target = e.target as HTMLElement;
    const videoContainer = target.closest('.video-container') as HTMLElement;
    const modal = document.getElementById('video-modal') as HTMLDivElement;
    const modalContent = document.getElementById('modal-content') as HTMLDivElement;

    if (videoContainer) {
      const platform = videoContainer.dataset.type!;
      const videoId = videoContainer.dataset.videoId!;

      // For DocCheck, directly open in new tab
      if (platform === 'Doccheck') {
        window.open(`https://www.doccheck.com/en/detail/videos/${videoId}`, '_blank', 'noopener,noreferrer');
        return;
      }

      // For other platforms, show in modal
      if (modalContent && modal) {
        selectedItem = {
          platform,
          videoId,
          title: videoContainer.dataset.title!,
          poster: videoContainer.dataset.poster,
          video: videoContainer.dataset.video
            ? {
                src: videoContainer.dataset.video,
                alt: videoContainer.dataset.title!,
              }
            : undefined,
        };

        // Clear modal content
        modalContent.innerHTML = '';

        // Add title
        const titleEl = document.createElement('h3');
        titleEl.className = 'text-xl font-bold text-gray-900 dark:text-gray-100 mb-4';
        titleEl.textContent = selectedItem.title;
        modalContent.appendChild(titleEl);

        // Add thumbnail first (will be replaced by player after transition)
        const thumbnailContainer = document.createElement('div');
        thumbnailContainer.className = 'player-container relative w-full aspect-video';
        const thumbnailImg = videoContainer.querySelector('img')?.cloneNode(true) as HTMLImageElement;
        if (thumbnailImg) {
          thumbnailImg.className = 'w-full h-full object-cover rounded-lg';
          thumbnailContainer.appendChild(thumbnailImg);
        }
        modalContent.appendChild(thumbnailContainer);

        // Show modal with transition
        openModal(videoContainer, modal, modalContent);
      }
    }

    // Close modal when clicking outside
    if (modal && modal.classList.contains('visible')) {
      const clickedOutside = !target.closest('#modal-content') && !target.closest('.video-container');
      if (clickedOutside) {
        closeModal();
      }
    }
  };

  document.addEventListener('keydown', handleKeydown);
  document.addEventListener('click', handleClick);

  // Cleanup on component unmount
  document.addEventListener('astro:unmount', () => {
    document.removeEventListener('keydown', handleKeydown);
    document.removeEventListener('click', handleClick);
  });
</script>

<style>
  #video-modal {
    display: none;
    opacity: 0;
    visibility: hidden;
    transition:
      opacity 300ms ease-out,
      visibility 300ms ease-out;
  }

  #video-modal.visible {
    opacity: 1;
    visibility: visible;
  }

  .player-container {
    display: block;
  }

  ::view-transition-old(modal) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both modal-fade-out;
  }

  ::view-transition-new(modal) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both modal-fade-in;
  }

  @keyframes modal-fade-in {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes modal-fade-out {
    from {
      opacity: 1;
      transform: scale(1);
    }
    to {
      opacity: 0;
      transform: scale(0.8);
    }
  }
</style>

<WidgetWrapper animated={false} containerClass="py-0 lg:py-0 md:py-0">
  <div class="max-w-7xl mx-auto" role="region" aria-label="Videos and Podcasts">
    {
      sortedYears.map((year) => (
        <div class="mb-16 sm:mb-24 item-year-card" role="region" aria-label={`Videos and Podcasts from ${year}`}>
          <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-gray-100 mb-8 sm:mb-12 text-center intersect-once intersect-tenth sm:intersect-quarter intercept-no-queue motion-safe:opacity-0 motion-safe:intersect:animate-fade">
            {year}
          </h2>
          <div
            class={twMerge(
              'grid gap-8 gap-x-12 sm:gap-y-8',
              columns === 1 ? 'md:grid-cols-1' : null,
              columns === 2 ? 'md:grid-cols-2' : null,
              columns === 3 ? 'md:grid-cols-3' : null,
              columns === 4 ? 'md:grid-cols-4' : null,
              classes.container
            )}
          >
            {videosAndPodcastsByYear[year].map((item) => (
              <div
                class="group item-card block hover:cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary rounded-lg duration-1000 ease-out intersect-once intersect-tenth sm:intersect-quarter intercept-no-queue motion-safe:opacity-0 motion-safe:intersect:animate-fade video-container"
                data-type={item.platform}
                data-video-id={item.videoId}
                data-title={item.title}
                data-poster={item.poster?.src}
                data-video={item.video}
                aria-label={`View ${item.title} video`}
                role="listitem"
              >
                <div
                  class={twMerge(
                    'bg-white dark:bg-slate-900 rounded-lg shadow-lg dark:shadow-none p-6 h-full transition-all duration-300 group-hover:shadow-xl dark:group-hover:shadow-none',
                    classes.item
                  )}
                  aria-labelledby={`video-${item.title.toLowerCase().replace(/\s+/g, '-')}`}
                >
                  <div class="text-sm font-medium text-primary-600 dark:text-primary-400 mb-3">
                    {new Date(item.date).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric',
                    })}
                  </div>
                  <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">{item.title}</h3>
                  <div class="relative w-full aspect-video thumbnail-wrapper transition-transform duration-300 ease-out group-hover:scale-[1.01]">
                    {item.platform === 'Youtube' ? (
                      <img
                        src={`https://img.youtube.com/vi/${item.videoId}/${item.videoQuality === 'hq' ? 'hqdefault' : 'maxresdefault'}.jpg`}
                        alt={item.title}
                        class="w-full h-full object-cover rounded-lg"
                      />
                    ) : item.platform === 'Vimeo' ||
                      item.platform === 'Spotify' ||
                      item.platform === 'Doccheck' ||
                      item.platform === 'Other' ? (
                      <Image
                        src={item.poster}
                        alt={item.title}
                        class="w-full h-full object-cover rounded-lg"
                        width={1024}
                        height={576}
                      />
                    ) : item.platform === 'Soundcloud' ? (
                      <div class="w-full h-full bg-gradient-to-r from-orange-500 to-yellow-500 rounded-lg flex items-center justify-center thumbnail-placeholder hover:shadow-lg transition-shadow duration-300">
                        <svg class="w-16 h-16 text-white" viewBox="0 0 24 24" fill="currentColor">
                          <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z" />
                        </svg>
                      </div>
                    ) : null}
                    <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-300 ease-out flex items-center justify-center rounded-lg">
                      <svg
                        class="w-16 h-16 text-white opacity-0 group-hover:opacity-100 transition-all duration-300 ease-out"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width={2}
                          d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                        />
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width={2}
                          d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))
    }
  </div>
</WidgetWrapper>

<!-- Modal -->
<div
  id="video-modal"
  class="fixed inset-0 z-[9999] bg-black/90"
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-title"
>
  <div
    id="modal-content"
    role="document"
    class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[calc(100%-2rem)] sm:w-[calc(100%-4rem)] md:w-[calc(100%-8rem)] max-w-4xl mx-auto bg-white dark:bg-slate-900 rounded-lg shadow-lg dark:shadow-none p-4 pt-8 sm:p-6 md:p-8"
  >
  </div>
</div>
