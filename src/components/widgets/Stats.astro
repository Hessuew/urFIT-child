---
import type { Stats as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Headline from '../ui/Headline.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import AnimatedChildSvg from './AnimatedChildSvg.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  stats = [],

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const { item: itemClass = '' } = classes;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />
  <div class="flex flex-wrap justify-center -m-4 text-center">
    {
      stats &&
        stats.map(({ amount, classes, title, icon, lowerCase, curve }) => (
          <div
            class={twMerge(
              'p-4 md:w-1/4 sm:w-1/2 w-full min-w-[220px] text-center md:border-r md:last:border-none dark:md:border-slate-500 intersect-once motion-safe:opacity-0 motion-safe:intersect:animate-fade intersect-tenth sm:intersect-quarter',
              itemClass as string
            )}
          >
            {icon && (
              <div class="flex items-center justify-center mx-auto mb-4 text-primary">
                <Icon name={icon} class="w-10 h-10" />
              </div>
            )}
            <div class="relative inline-block min-w-[220px]">
              {amount && (
                <div
                  class={twMerge(
                    'font-heading text-primary text-3xl sm:text-[2.6rem] font-bold lg:text-5xl xl:text-6xl',
                    classes?.amount
                  )}
                  aria-label={`${title}: ${amount}`}
                >
                  {amount}
                </div>
              )}
              {curve && (
                <div class="absolute -bottom-2.5 -right-8 lg:-bottom-10 lg:-right-12 w-16 h-12 lg:w-24 lg:h-20">
                  <AnimatedChildSvg stroke="text-primary" delay={1000} classes="w-full h-full" />
                </div>
              )}
            </div>
            {title && (
              <div
                class={twMerge(
                  `text-sm lg:text-base font-medium tracking-widest text-gray-800 dark:text-slate-400`,
                  !lowerCase ? 'uppercase' : ''
                )}
              >
                {title}
              </div>
            )}
          </div>
        ))
    }
  </div>
</WidgetWrapper>
