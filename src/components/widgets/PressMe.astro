---
import { Icon } from 'astro-icon/components';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
---

<style>
  .pushable {
    position: relative;
    border: none;
    background: transparent;
    padding: 0;
    cursor: pointer;
    outline-offset: 4px;
    transition: filter 250ms;
  }
  .shadow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 24px;
    background: hsl(0deg 0% 0% / 0.25);
    will-change: transform;
    transform: translateY(2px);
    transition: transform 600ms cubic-bezier(0.3, 0.7, 0.4, 1);
  }
  .edge {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 24px;
    background: linear-gradient(
      to left,
      hsl(213deg 51% 16%) 0%,
      hsl(213deg 51% 32%) 8%,
      hsl(213deg 51% 32%) 92%,
      hsl(213deg 51% 16%) 100%
    );
  }
  .front {
    display: block;
    position: relative;
    padding: 12px 42px;
    border-radius: 24px;
    color: white;
    background: hsl(213, 51%, 57%);
    /* background: hsl(345deg 100% 47%); */
    /* background: var(--aw-color-primary); */
    will-change: transform;
    transform: translateY(-4px);
    transition: transform 600ms cubic-bezier(0.3, 0.7, 0.4, 1);
  }

  .pushable:hover {
    filter: brightness(110%);
  }

  .pushable:hover .front {
    transform: translateY(-6px);
    transition: transform 250ms cubic-bezier(0.3, 0.7, 0.4, 1.5);
  }
  .pushable:active .front {
    transform: translateY(-2px);
    transition: transform 34ms;
  }

  .pushable:hover .shadow {
    transform: translateY(4px);
    transition: transform 250ms cubic-bezier(0.3, 0.7, 0.4, 1.5);
  }
  .pushable:active .shadow {
    transform: translateY(1px);
    transition: transform 34ms;
  }

  .pushable:focus:not(:focus-visible) {
    outline: none;
  }

  @keyframes hover {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-50px);
    }
    100% {
      transform: translateY(0);
    }
  }

  .smooth-hover {
    animation: hover 3s ease-in-out infinite;
    animation-timing-function: cubic-bezier(0.45, 0, 0.55, 1);
  }

  .down-arrow {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  .down-arrow.visible {
    opacity: 1;
  }

  .wave {
    animation-name: wave-animation; /* Refers to the name of your @keyframes element below */
    animation-duration: 2.5s; /* Change to speed up or slow down */
    animation-iteration-count: infinite; /* Never stop waving :) */
    transform-origin: 70% 70%; /* Pivot around the bottom-left palm */
    display: inline-block;
  }

  @keyframes wave-animation {
    0% {
      transform: rotate(0deg);
    }
    10% {
      transform: rotate(14deg);
    } /* The following five values can be played with to make the waving more or less extreme */
    20% {
      transform: rotate(-8deg);
    }
    30% {
      transform: rotate(14deg);
    }
    40% {
      transform: rotate(-4deg);
    }
    50% {
      transform: rotate(10deg);
    }
    60% {
      transform: rotate(0deg);
    } /* Reset for the last half to pause */
    100% {
      transform: rotate(0deg);
    }
  }
</style>

<WidgetWrapper>
  <div class="flex flex-col items-center pb-20 relative">
    <button id="pressMeButton" class="pushable">
      <span class="shadow"></span>
      <span class="edge"></span>
      <span class="front text-xl xl:text-[20px] xl:leading-[28px]">
        <div class="flex flex-row items-center gap-2 xl:gap-[8px]">
          Press Me
          <span class="wave">
            <Icon name="tabler:hand-click" class="mt-3 xl:mt-[12px] w-6 h-6 xl:w-[24px] xl:h-[24px]" />
          </span>
        </div>
      </span>
    </button>
    <div class="down-arrow absolute -bottom-10 xl:-bottom-[40px]" data-down-arrow>
      <Icon name="tabler:chevron-down" color="white" class="w-24 h-24 xl:w-[96px] xl:h-[96px] smooth-hover" />
    </div>
  </div>
</WidgetWrapper>

<script>
  function applyTheme(theme: string) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  function initButton() {
    const button = document.querySelector('#pressMeButton');
    if (!button) {
      return;
    }

    // Remove any existing event listeners
    const newButton = button.cloneNode(true);
    button.parentNode?.replaceChild(newButton, button);

    // Add new event listener
    newButton.addEventListener('click', () => {
      // Try to find elements multiple times with increasing delay
      let attempts = 0;
      const maxAttempts = 5;

      function tryFindElements() {
        const videoBackground = document.getElementById('videoBackground');
        const downArrow = document.querySelector('[data-down-arrow]');
        const pressMeContent = document.getElementById('pressMeContent');

        if (videoBackground && downArrow && pressMeContent) {
          // Execute the animation sequence
          videoBackground.classList.remove('opacity-0');
          videoBackground.classList.add('opacity-100');
          (newButton as HTMLElement).classList.add('opacity-0', 'pointer-events-none');
          pressMeContent.classList.remove('hidden');

          setTimeout(() => {
            downArrow.classList.add('visible');
          }, 1400);

          localStorage.theme = 'dark';
          applyTheme('dark');
        } else if (attempts < maxAttempts) {
          attempts++;
          setTimeout(tryFindElements, attempts * 100);
        }
      }

      // Start the first attempt
      tryFindElements();
    });
  }

  function initializeOnLoad() {
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        initButton();
      });
    } else {
      initButton();
    }
  }

  // Initialize immediately for the first page load
  initializeOnLoad();
  document.addEventListener('astro:page-load', () => {
    initializeOnLoad();
  });

  // Clean up before page transitions
  document.addEventListener('astro:before-swap', () => {
    const button = document.querySelector('#pressMeButton');
    if (button) {
      const newButton = button.cloneNode(true);
      button.parentNode?.replaceChild(newButton, button);
    }
  });
</script>
