---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import Headline from '~/components/ui/Headline.astro';
import ItemGrid2 from '~/components/ui/ItemGrid2.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Features as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  callToAction,
  items = [],
  columns = 3,
  defaultIcon,
  image = await Astro.slots.render('image'),
  image2 = await Astro.slots.render('image2'),
  imageText = await Astro.slots.render('imageText'),
  imageText2 = await Astro.slots.render('imageText2'),
  isReversed = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />

  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16`}>
      <section class="md:basis-1/2" aria-labelledby="content-heading">
        <h2 id="content-heading" class="sr-only">Main Content</h2>

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }
        <ItemGrid2
          items={items}
          columns={columns}
          defaultIcon={defaultIcon}
          classes={{
            container: 'gap-4 md:gap-6',
            panel:
              'rounded-lg shadow-[0_4px_30px_rgba(0,0,0,0.1)] dark:shadow-[0_4px_30px_rgba(0,0,0,0.1)] backdrop-blur border border-[#ffffff29] bg-white dark:bg-slate-900 p-6',
            // panel:
            //   "text-center bg-page items-center md:text-left rtl:md:text-right md:items-start p-6 p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-800",
            icon: 'w-12 h-12 mb-6 text-primary',
            ...((classes?.items as Record<string, never>) ?? {}),
          }}
        />
      </section>
      <div
        aria-hidden="true"
        class="mt-10 md:mt-0 md:basis-1/2 intersect-once intersect-tenth sm:intersect-quarter intercept-no-queue motion-safe:opacity-0 motion-safe:intersect:animate-fade"
      >
        {
          image && (
            <figure class="relative mx-auto max-w-4xl">
              {typeof image === 'string' ? (
                <div class="image-container" aria-label={imageText || 'Content image'}>
                  <Fragment set:html={image} />
                </div>
              ) : (
                <Image
                  class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                  width={500}
                  height={image2 ? 280 : 580}
                  widths={[400, 768, 1024]}
                  sizes="(max-width: 768px) 100vw, (max-width: 1024px) 768px, 1024px"
                  layout="responsive"
                  objectPosition="center 25%"
                  loading="lazy"
                  decoding="async"
                  alt={imageText || 'Content image'}
                  {...image}
                />
              )}
              {imageText && (
                <figcaption class="my-2 text-center text-sm text-gray-600 dark:text-gray-400">{imageText}</figcaption>
              )}
            </figure>
          )
        }
        {
          image2 && (
            <figure class="relative mx-auto max-w-4xl">
              {typeof image2 === 'string' ? (
                <div class="image-container" aria-label={imageText || 'Content image'}>
                  <Fragment set:html={image2} />
                </div>
              ) : (
                <Image
                  class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                  width={500}
                  height={280}
                  widths={[400, 768, 1024]}
                  sizes="(max-width: 768px) 100vw, (max-width: 1024px) 768px, 1024px"
                  layout="responsive"
                  loading="lazy"
                  decoding="async"
                  alt={imageText2 || 'Content image'}
                  {...image2}
                />
              )}
              {imageText2 && (
                <figcaption class="my-2 text-center text-sm text-gray-600 dark:text-gray-400">{imageText2}</figcaption>
              )}
            </figure>
          )
        }
      </div>
    </div>
  </div>
</WidgetWrapper>
