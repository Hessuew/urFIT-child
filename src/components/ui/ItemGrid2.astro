---
import Image from '~/components/common/Image.astro';
import type { ItemGrid as Props } from '~/types';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import Button from './Button.astro';

const { items = [], columns, defaultIcon = '', classes = {} } = Astro.props;

const {
  container: containerClass = '',
  // container: containerClass = "sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-3",
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `grid mx-auto gap-8 md:gap-y-12 xl:gap-[32px] xl:gap-y-[48px] ${
          columns === 4
            ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2'
            : columns === 3
              ? 'lg:grid-cols-3 sm:grid-cols-2'
              : columns === 2
                ? 'sm:grid-cols-2 '
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(({ title, description, icon, callToAction, image, classes: itemClasses = {} }) => (
        <div
          class={twMerge(
            'relative flex flex-col intersect-once intersect-tenth sm:intersect-quarter intercept-no-queue motion-safe:opacity-0 motion-safe:intersect:animate-fade',
            panelClass,
            itemClasses?.panel
          )}
        >
          {image && (
            <div class="h-32 w-32 xl:h-[128px] xl:w-[128px] mb-8 xl:mb-[32px] rounded-full border border-slate-200 dark:border-slate-600">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="h-32 w-32 xl:h-[128px] xl:w-[128px] rounded-full border border-slate-200 dark:border-slate-600 min-w-full min-h-full"
                  width={40}
                  height={40}
                  widths={[400, 768]}
                  sizes="(max-width: 767px) 400px, 768px"
                  loading="lazy"
                  decoding="async"
                  style="object-fit: cover; object-position: center;"
                  layout="fixed"
                  {...image}
                />
              )}
            </div>
          )}
          {(icon || defaultIcon) && (
            <Icon
              name={icon || defaultIcon}
              class={twMerge('mb-2 xl:mb-[8px] w-10 h-10 xl:w-[40px] xl:h-[40px]', defaultIconClass, itemClasses?.icon)}
            />
          )}
          <div class={twMerge('text-xl xl:text-[20px] xl:leading-[28px] font-bold', titleClass, itemClasses?.title)}>
            {title}
          </div>
          {description && (
            <div class="flex-1 text-base xl:text-[16px] xl:leading-[24px] justify-between flex flex-col">
              <p
                class={twMerge('text-muted mt-2 xl:mt-[8px]', descriptionClass, itemClasses?.description)}
                set:html={description}
              />
            </div>
          )}
          {callToAction && (
            <div class="mt-2 xl:mt-[8px]">
              <Button {...callToAction} />
            </div>
          )}
        </div>
      ))}
    </div>
  )
}
